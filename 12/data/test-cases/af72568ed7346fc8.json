{"uid":"af72568ed7346fc8","name":"test_github_issue_exists","fullName":"tests.test_with_allure_step#test_github_issue_exists","historyId":"37fb109201523e333d6e36591a060046","time":{"start":1750176255115,"stop":1750176255115,"duration":0},"status":"broken","statusMessage":"selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 114\nCurrent browser version is 137.0.7151.103 with binary path /usr/bin/google-chrome\nStacktrace:\n#0 0x55c303db94e3 <unknown>\n#1 0x55c303ae8c76 <unknown>\n#2 0x55c303b1604a <unknown>\n#3 0x55c303b114a1 <unknown>\n#4 0x55c303b0e029 <unknown>\n#5 0x55c303b4cccc <unknown>\n#6 0x55c303b4c47f <unknown>\n#7 0x55c303b43de3 <unknown>\n#8 0x55c303b192dd <unknown>\n#9 0x55c303b1a34e <unknown>\n#10 0x55c303d793e4 <unknown>\n#11 0x55c303d7d3d7 <unknown>\n#12 0x55c303d87b20 <unknown>\n#13 0x55c303d7e023 <unknown>\n#14 0x55c303d4c1aa <unknown>\n#15 0x55c303da26b8 <unknown>\n#16 0x55c303da2847 <unknown>\n#17 0x55c303db2243 <unknown>\n#18 0x7f095729caa4 <unknown>\n#19 0x7f0957329c3c <unknown>","statusTrace":"@pytest.fixture(scope='function')\n    def browser():\n        options = Options()\n        options.add_argument('--headless')\n        options.add_argument('--disable-gpu')\n        options.add_argument('--no-sandbox')\n        options.add_argument('--disable-dev-shm-usage')\n        #options.add_argument('--window-size=1280,760')\n    \n>       driver = webdriver.Chrome(options=options)\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nconftest.py:15: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.13.4/x64/lib/python3.13/site-packages/selenium/webdriver/chrome/webdriver.py:47: in __init__\n    super().__init__(\n/opt/hostedtoolcache/Python/3.13.4/x64/lib/python3.13/site-packages/selenium/webdriver/chromium/webdriver.py:69: in __init__\n    super().__init__(command_executor=executor, options=options)\n/opt/hostedtoolcache/Python/3.13.4/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:257: in __init__\n    self.start_session(capabilities)\n/opt/hostedtoolcache/Python/3.13.4/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:356: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n/opt/hostedtoolcache/Python/3.13.4/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fb5cfd71450>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created: This version of Chro...\\\\n#17 0x55c303db2243 \\\\u003Cunknown>\\\\n#18 0x7f095729caa4 \\\\u003Cunknown>\\\\n#19 0x7f0957329c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 114\nE       Current browser version is 137.0.7151.103 with binary path /usr/bin/google-chrome\nE       Stacktrace:\nE       #0 0x55c303db94e3 <unknown>\nE       #1 0x55c303ae8c76 <unknown>\nE       #2 0x55c303b1604a <unknown>\nE       #3 0x55c303b114a1 <unknown>\nE       #4 0x55c303b0e029 <unknown>\nE       #5 0x55c303b4cccc <unknown>\nE       #6 0x55c303b4c47f <unknown>\nE       #7 0x55c303b43de3 <unknown>\nE       #8 0x55c303b192dd <unknown>\nE       #9 0x55c303b1a34e <unknown>\nE       #10 0x55c303d793e4 <unknown>\nE       #11 0x55c303d7d3d7 <unknown>\nE       #12 0x55c303d87b20 <unknown>\nE       #13 0x55c303d7e023 <unknown>\nE       #14 0x55c303d4c1aa <unknown>\nE       #15 0x55c303da26b8 <unknown>\nE       #16 0x55c303da2847 <unknown>\nE       #17 0x55c303db2243 <unknown>\nE       #18 0x7f095729caa4 <unknown>\nE       #19 0x7f0957329c3c <unknown>\n\n/opt/hostedtoolcache/Python/3.13.4/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: SessionNotCreatedException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"browser","time":{"start":1750176255116,"stop":1750176255420,"duration":304},"status":"broken","statusMessage":"selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 114\nCurrent browser version is 137.0.7151.103 with binary path /usr/bin/google-chrome\nStacktrace:\n#0 0x55c303db94e3 <unknown>\n#1 0x55c303ae8c76 <unknown>\n#2 0x55c303b1604a <unknown>\n#3 0x55c303b114a1 <unknown>\n#4 0x55c303b0e029 <unknown>\n#5 0x55c303b4cccc <unknown>\n#6 0x55c303b4c47f <unknown>\n#7 0x55c303b43de3 <unknown>\n#8 0x55c303b192dd <unknown>\n#9 0x55c303b1a34e <unknown>\n#10 0x55c303d793e4 <unknown>\n#11 0x55c303d7d3d7 <unknown>\n#12 0x55c303d87b20 <unknown>\n#13 0x55c303d7e023 <unknown>\n#14 0x55c303d4c1aa <unknown>\n#15 0x55c303da26b8 <unknown>\n#16 0x55c303da2847 <unknown>\n#17 0x55c303db2243 <unknown>\n#18 0x7f095729caa4 <unknown>\n#19 0x7f0957329c3c <unknown>\n\n","statusTrace":"  File \"/opt/hostedtoolcache/Python/3.13.4/x64/lib/python3.13/site-packages/pluggy/_callers.py\", line 38, in run_old_style_hookwrapper\n    res = yield\n          ^^^^^\n  File \"/opt/hostedtoolcache/Python/3.13.4/x64/lib/python3.13/site-packages/pluggy/_callers.py\", line 139, in _multicall\n    teardown.throw(exception)\n    ~~~~~~~~~~~~~~^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.13.4/x64/lib/python3.13/site-packages/_pytest/setuponly.py\", line 36, in pytest_fixture_setup\n    return (yield)\n            ^^^^^\n  File \"/opt/hostedtoolcache/Python/3.13.4/x64/lib/python3.13/site-packages/pluggy/_callers.py\", line 121, in _multicall\n    res = hook_impl.function(*args)\n  File \"/opt/hostedtoolcache/Python/3.13.4/x64/lib/python3.13/site-packages/_pytest/fixtures.py\", line 1195, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"/opt/hostedtoolcache/Python/3.13.4/x64/lib/python3.13/site-packages/_pytest/fixtures.py\", line 922, in call_fixture_func\n    fixture_result = next(generator)\n  File \"/home/runner/work/qa_guru_hw_8/qa_guru_hw_8/conftest.py\", line 15, in browser\n    driver = webdriver.Chrome(options=options)\n  File \"/opt/hostedtoolcache/Python/3.13.4/x64/lib/python3.13/site-packages/selenium/webdriver/chrome/webdriver.py\", line 47, in __init__\n    super().__init__(\n    ~~~~~~~~~~~~~~~~^\n        browser_name=DesiredCapabilities.CHROME[\"browserName\"],\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    ...<3 lines>...\n        keep_alive=keep_alive,\n        ^^^^^^^^^^^^^^^^^^^^^^\n    )\n    ^\n  File \"/opt/hostedtoolcache/Python/3.13.4/x64/lib/python3.13/site-packages/selenium/webdriver/chromium/webdriver.py\", line 69, in __init__\n    super().__init__(command_executor=executor, options=options)\n    ~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.13.4/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py\", line 257, in __init__\n    self.start_session(capabilities)\n    ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.13.4/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py\", line 356, in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n               ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.13.4/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py\", line 447, in execute\n    self.error_handler.check_response(response)\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.13.4/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py\", line 232, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 114\nCurrent browser version is 137.0.7151.103 with binary path /usr/bin/google-chrome\nStacktrace:\n#0 0x55c303db94e3 <unknown>\n#1 0x55c303ae8c76 <unknown>\n#2 0x55c303b1604a <unknown>\n#3 0x55c303b114a1 <unknown>\n#4 0x55c303b0e029 <unknown>\n#5 0x55c303b4cccc <unknown>\n#6 0x55c303b4c47f <unknown>\n#7 0x55c303b43de3 <unknown>\n#8 0x55c303b192dd <unknown>\n#9 0x55c303b1a34e <unknown>\n#10 0x55c303d793e4 <unknown>\n#11 0x55c303d7d3d7 <unknown>\n#12 0x55c303d87b20 <unknown>\n#13 0x55c303d7e023 <unknown>\n#14 0x55c303d4c1aa <unknown>\n#15 0x55c303da26b8 <unknown>\n#16 0x55c303da2847 <unknown>\n#17 0x55c303db2243 <unknown>\n#18 0x7f095729caa4 <unknown>\n#19 0x7f0957329c3c <unknown>","statusTrace":"@pytest.fixture(scope='function')\n    def browser():\n        options = Options()\n        options.add_argument('--headless')\n        options.add_argument('--disable-gpu')\n        options.add_argument('--no-sandbox')\n        options.add_argument('--disable-dev-shm-usage')\n        #options.add_argument('--window-size=1280,760')\n    \n>       driver = webdriver.Chrome(options=options)\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nconftest.py:15: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.13.4/x64/lib/python3.13/site-packages/selenium/webdriver/chrome/webdriver.py:47: in __init__\n    super().__init__(\n/opt/hostedtoolcache/Python/3.13.4/x64/lib/python3.13/site-packages/selenium/webdriver/chromium/webdriver.py:69: in __init__\n    super().__init__(command_executor=executor, options=options)\n/opt/hostedtoolcache/Python/3.13.4/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:257: in __init__\n    self.start_session(capabilities)\n/opt/hostedtoolcache/Python/3.13.4/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:356: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n/opt/hostedtoolcache/Python/3.13.4/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fb5cfd71450>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created: This version of Chro...\\\\n#17 0x55c303db2243 \\\\u003Cunknown>\\\\n#18 0x7f095729caa4 \\\\u003Cunknown>\\\\n#19 0x7f0957329c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 114\nE       Current browser version is 137.0.7151.103 with binary path /usr/bin/google-chrome\nE       Stacktrace:\nE       #0 0x55c303db94e3 <unknown>\nE       #1 0x55c303ae8c76 <unknown>\nE       #2 0x55c303b1604a <unknown>\nE       #3 0x55c303b114a1 <unknown>\nE       #4 0x55c303b0e029 <unknown>\nE       #5 0x55c303b4cccc <unknown>\nE       #6 0x55c303b4c47f <unknown>\nE       #7 0x55c303b43de3 <unknown>\nE       #8 0x55c303b192dd <unknown>\nE       #9 0x55c303b1a34e <unknown>\nE       #10 0x55c303d793e4 <unknown>\nE       #11 0x55c303d7d3d7 <unknown>\nE       #12 0x55c303d87b20 <unknown>\nE       #13 0x55c303d7e023 <unknown>\nE       #14 0x55c303d4c1aa <unknown>\nE       #15 0x55c303da26b8 <unknown>\nE       #16 0x55c303da2847 <unknown>\nE       #17 0x55c303db2243 <unknown>\nE       #18 0x7f095729caa4 <unknown>\nE       #19 0x7f0957329c3c <unknown>\n\n/opt/hostedtoolcache/Python/3.13.4/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: SessionNotCreatedException","steps":[],"attachments":[{"uid":"3a7f9a20bebb3778","name":"log","source":"3a7f9a20bebb3778.txt","type":"text/plain","size":366}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_with_allure_step"},{"name":"host","value":"fv-az2234-38"},{"name":"thread","value":"3041-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_with_allure_step"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":5,"skipped":0,"passed":0,"unknown":0,"total":5},"items":[{"uid":"7e9c9963bceb3f2f","reportUrl":"https://juliSavitskaya.github.io/qa_guru_hw_8/11//#testresult/7e9c9963bceb3f2f","status":"broken","statusDetails":"selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\n  (unknown error: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n#0 0x5601f6d254e3 <unknown>\n#1 0x5601f6a54c76 <unknown>\n#2 0x5601f6a7dd78 <unknown>\n#3 0x5601f6a7a029 <unknown>\n#4 0x5601f6ab8ccc <unknown>\n#5 0x5601f6ab847f <unknown>\n#6 0x5601f6aafde3 <unknown>\n#7 0x5601f6a852dd <unknown>\n#8 0x5601f6a8634e <unknown>\n#9 0x5601f6ce53e4 <unknown>\n#10 0x5601f6ce93d7 <unknown>\n#11 0x5601f6cf3b20 <unknown>\n#12 0x5601f6cea023 <unknown>\n#13 0x5601f6cb81aa <unknown>\n#14 0x5601f6d0e6b8 <unknown>\n#15 0x5601f6d0e847 <unknown>\n#16 0x5601f6d1e243 <unknown>\n#17 0x7f64f429caa4 <unknown>\n#18 0x7f64f4329c3c <unknown>","time":{"start":1750176070231,"stop":1750176070231,"duration":0}},{"uid":"f476f4cd3b57fc70","reportUrl":"https://juliSavitskaya.github.io/qa_guru_hw_8/10//#testresult/f476f4cd3b57fc70","status":"broken","statusDetails":"selenium.common.exceptions.SessionNotCreatedException: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir\nStacktrace:\n#0 0x5650929d1c9a <unknown>\n#1 0x5650924776e0 <unknown>\n#2 0x5650924b20b2 <unknown>\n#3 0x5650924ad24f <unknown>\n#4 0x5650924fd8b6 <unknown>\n#5 0x5650924fcf76 <unknown>\n#6 0x5650924eec03 <unknown>\n#7 0x5650924bb47b <unknown>\n#8 0x5650924bc0e1 <unknown>\n#9 0x56509299644b <unknown>\n#10 0x56509299a37f <unknown>\n#11 0x56509297df89 <unknown>\n#12 0x56509299af18 <unknown>\n#13 0x5650929626df <unknown>\n#14 0x5650929bf308 <unknown>\n#15 0x5650929bf4e6 <unknown>\n#16 0x5650929d0b76 <unknown>\n#17 0x7f5db649caa4 <unknown>\n#18 0x7f5db6529c3c <unknown>","time":{"start":1750175161802,"stop":1750175161802,"duration":0}},{"uid":"46c923ec9311234b","reportUrl":"https://juliSavitskaya.github.io/qa_guru_hw_8/9//#testresult/46c923ec9311234b","status":"broken","statusDetails":"selenium.common.exceptions.TimeoutException: Message:","time":{"start":1750173993048,"stop":1750174003940,"duration":10892}},{"uid":"c7111d049f563006","reportUrl":"https://juliSavitskaya.github.io/qa_guru_hw_8/6//#testresult/c7111d049f563006","status":"broken","statusDetails":"selenium.common.exceptions.TimeoutException: Message:","time":{"start":1750172255377,"stop":1750172266298,"duration":10921}}]},"tags":[]},"source":"af72568ed7346fc8.json","parameterValues":[]}